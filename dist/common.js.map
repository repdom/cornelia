{"version":3,"sources":["webpack:///./src/app/services/usuario/usuario.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AACmB;AAC3B;AACW;AACG;AACf;AAKlC;IAAoC,kCAAW;IAE7C,wBAAY,IAAU;eACpB,kBAAM,8CAAM,CAAC,IAAI,GAAG,YAAY,EAAE,IAAI,CAAC;IACzC,CAAC;IAED,iCAAQ,GAAR,UAAS,OAAe,EAAE,WAAmB;QAC3C,IAAM,OAAO,GAAG,IAAI,qDAAO,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;QACjG,uDAAuD;QACvD,IAAM,OAAO,GAAG,IAAI,4DAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,QAAQ,GAAG,OAAO,GAAG,GAAG,GAAG,WAAW,EAAE,OAAO,CAAC;aAC7E,IAAI,CACH,0DAAG,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,EAChC,iEAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAC9B,CAAC;IACN,CAAC;IAED,gCAAO,GAAP,UAAQ,OAAe;QACrB,IAAM,OAAO,GAAG,IAAI,qDAAO,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;QACjG,uDAAuD;QACvD,IAAM,OAAO,GAAG,IAAI,4DAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG,OAAO,EAAE,OAAO,CAAC;aACxD,IAAI,CACH,0DAAG,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,EAChC,iEAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAC9B,CAAC;IACN,CAAC;IAED,oCAAW,GAAX,UAAY,QAAiB,EAAE,KAAe;QAC5C,OAAO,+CAAU,CAAC,MAAM,CAAC,UAAC,QAAQ;QAElC,CAAC,CAAC,CAAC;IACL,CAAC;IAhCU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAGkB,kDAAI;OAFX,cAAc,CAiC1B;IAAD,qBAAC;CAAA,CAjCmC,yDAAW,GAiC9C;AAjC0B","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, RequestOptions, Headers } from '@angular/http';\nimport { Config } from '../config';\nimport { DataService } from '../data.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsuarioService extends DataService {\n\n  constructor(http: Http) {\n    super(Config.host + '/usuarios/', http);\n  }\n\n  logearse(usuario: string, contrasenia: string) {\n    const headers = new Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json'});\n    // headers.append('Authorization', this.cookieService);\n    const options = new RequestOptions({ headers: headers });\n    return this.http.get(this.url + 'login/' + usuario + '/' + contrasenia, options)\n      .pipe(\n        map(response => response.json()),\n        catchError(this.handlerError)\n      );\n  }\n\n  getUrls(usuario: string) {\n    const headers = new Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json'});\n    // headers.append('Authorization', this.cookieService);\n    const options = new RequestOptions({ headers: headers });\n    return this.http.get(this.url + 'urls/' + usuario, options)\n      .pipe(\n        map(response => response.json()),\n        catchError(this.handlerError)\n      );\n  }\n\n  estaLogeado(logueado: boolean, admin?: boolean) {\n    return Observable.create((logueado) => {\n\n    });\n  }\n}\n"],"sourceRoot":""}